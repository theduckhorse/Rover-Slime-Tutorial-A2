<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE html
	PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<style>
	#messages {
		background-color: yellow;
		font-size: 3;
		font-weight: bold;
		line-height: 140%;
	}

	#status {
		background-color: red;
		font-size: 4;
		font-weight: bold;
		color: white;
		line-height: 140%;
	}

	.vert-align{
		padding: 10px;
		vertical-align: top;
	}

	td{
		border-right: 1px solid black;
	}
</style>

<head>
	<title>CSC2003</title>
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<script src="https://cdnjs.cloudflare.com/ajax/libs/paho-mqtt/1.0.1/mqttws31.js" type="text/javascript"></script>
	<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
	<script type="text/javascript">

		//change the status on connection lost
		function onConnectionLost() {
			console.log("connection lost");
			document.getElementById("status").innerHTML = "Connection Lost";
			document.getElementById("status_messages").innerHTML = "Connection Lost";
			connected_flag = 0;
		}
		//change the status on connection lost
		function onFailure(message) {
			console.log("Failed");
			document.getElementById("status_messages").innerHTML = "Connection Failed- Retrying";
			setTimeout(MQTTconnect, reconnectTimeout);
		}

		// MQTT message subscribe on receive
		function onMessageArrived(r_message) {
			out_msg = r_message.payloadString;
			out_msg = out_msg + "<br/>";
			out_msg = "<b>" + out_msg + "</b>";
			let msgArray = out_msg.split(",");

			try {
				document.getElementById("out_messages").innerHTML += out_msg;
				document.getElementById("Barcode").innerHTML = msgArray[0];
			}
			catch (err) {
				document.getElementById("out_messages").innerHTML = err.message;
			}

			if (row == 10) {
				row = 1;
				document.getElementById("out_messages").innerHTML = out_msg;
			}
			else
				row += 1;

			mcount += 1;
			console.log(mcount + "  " + row);
		}

		function onConnected(recon, url) {
			console.log(" in onConnected " + reconn);
		}

		function onConnect() {
			// Once a connection has been made, make a subscription and send a message.
			document.getElementById("status_messages").innerHTML = "Connected to " + host + "on port " + port;
			connected_flag = 1;
			document.getElementById("status").innerHTML = "Connected";
			console.log("on Connect " + connected_flag);

		}
		function disconnect() {
			if (connected_flag == 1)
				mqtt.disconnect();
		}

		function MQTTconnect() {
			var clean_sessions = document.forms["connform"]["clean_sessions"].value;
			console.log("clean= " + clean_sessions);

			if (clean_sessions = document.forms["connform"]["clean_sessions"].checked)
				clean_sessions = true
			else
				clean_sessions = false

			document.getElementById("status_messages").innerHTML = "";
			var s = document.forms["connform"]["server"].value;
			var p = document.forms["connform"]["port"].value;
			if (p != "") {
				port = parseInt(p);
			}
			if (s != "") {
				host = s;
				console.log("host");
			}

			console.log("connecting to " + host + " " + port + "clean session=" + clean_sessions);
			// console.log("user " + user_name);
			document.getElementById("status_messages").innerHTML = 'connecting';
			var x = Math.floor(Math.random() * 10000);
			var cname = "orderform-" + x;
			mqtt = new Paho.MQTT.Client(host, port, cname);
			//document.write("connecting to "+ host);
			var options = {
				timeout: 3,
				cleanSession: clean_sessions,
				onSuccess: onConnect,
				onFailure: onFailure,

			};

			mqtt.onConnectionLost = onConnectionLost;
			mqtt.onMessageArrived = onMessageArrived;
			mqtt.onConnected = onConnected;

			mqtt.connect(options);
			return false;


		}
		function sub_topics() {
			document.getElementById("status_messages").innerHTML = "";
			if (connected_flag == 0) {
				out_msg = "<b>Not Connected so can't subscribe</b>"
				console.log(out_msg);
				document.getElementById("status_messages").innerHTML = out_msg;
				return false;
			}
			var stopic = document.forms["subs"]["Stopic"].value;
			console.log("here");
			var sqos = parseInt(document.forms["subs"]["sqos"].value);
			if (sqos > 2)
				sqos = 0;
			console.log("Subscribing to topic =" + stopic + " QOS " + sqos);
			document.getElementById("status_messages").innerHTML = "Subscribing to topic =" + stopic;
			var soptions = {
				qos: sqos,
			};
			mqtt.subscribe(stopic, soptions);
			return false;
		}
		function send_message() {
			document.getElementById("status_messages").innerHTML = "";
			if (connected_flag == 0) {
				out_msg = "<b>Not Connected so can't send</b>"
				console.log(out_msg);
				document.getElementById("status_messages").innerHTML = out_msg;
				return false;
			}
			var pqos = parseInt(document.forms["smessage"]["pqos"].value);
			if (pqos > 2)
				pqos = 0;
			var msg = document.forms["smessage"]["message"].value;
			console.log(msg);
			document.getElementById("status_messages").innerHTML = "Sending message  " + msg;

			var topic = document.forms["smessage"]["Ptopic"].value;
			if (document.forms["smessage"]["retain"].checked)
				retain_flag = true;
			else
				retain_flag = false;
			message = new Paho.MQTT.Message(msg);
			if (topic == "")
				message.destinationName = "test-topic";
			else
				message.destinationName = topic;
			message.qos = pqos;
			message.retained = retain_flag;
			mqtt.send(message);
			return false;
		}

		function send_coord(){
			console.log("send_coord");
			document.getElementById("status_messages").innerHTML = "";
			if (connected_flag == 0) {
				out_msg = "<b>Not Connected so can't send</b>"
				console.log(out_msg);
				document.getElementById("status_messages").innerHTML = out_msg;
				return false;
			}
			var msg = document.forms["pmapping"]["start"].value + "," + document.forms["pmapping"]["end"].value;
			console.log(msg);
			document.getElementById("status_messages").innerHTML = "Sending message  " + msg;

			message = new Paho.MQTT.Message(msg);
			message.destinationName = "send_coord";
			message.qos = 0;
			message.retained = false;
			mqtt.send(message);
			return false;
		}

	</script>

</head>

<body>
	<h1>CSC2003 MQTT</h1>

	<script type="text/javascript">
//ll

	</script>

	<div id="status">Connection Status: Not Connected</div>
	<br>
	<table>
		<tr>

			<td id="connect" class="vert-align" width="200">

				<form name="connform" action="" onsubmit="return MQTTconnect()">

					Server: <input type="text" name="server" value="test.mosquitto.org"><br><br>
					Port: <input type="text" name="port" value="8080"><br><br>
					Clean Session: <input type="checkbox" name="clean_sessions" value="true" checked><br><br>
					<input name="conn" type="submit" value="Connect">
					<input TYPE="button" name="discon " value="Disconnect" onclick="disconnect()">
				</form>
			</td>
			
			<td id="subscribe" class="vert-align" width="200">
				<form name="subs" action="" onsubmit="return sub_topics()">
					Subscribe Topic: <input type="text" name="Stopic"><br><br>
					Subscribe QOS: <input type="text" name="sqos" value="0"><br><br>
					<input type="submit" value="Subscribe">
				</form>
			</td>

			<td id="publish" class="vert-align" width="200">
				<form name="smessage" action="" onsubmit="return send_message()">

					Message: <input type="text" name="message"><br><br>
					Publish Topic: <input type="text" name="Ptopic"><br><br>
					Publish QOS: <input type="text" name="pqos" value="0"><br><br>
					Retain Message: <input type="checkbox" name="retain" value="true"><br><br>
					<input type="submit" value="Submit">
				</form>
			</td>

			<td id="mapping" class="vert-align" width="200">
				<form name="pmapping" action="" onsubmit="return send_coord()">
					Starting Coordinate: <input type="text" name="start"><br><br>
					Ending Coordinate: <input type="text" name="end"><br><br>
					<input type="submit" value="Submit">
				</form>
			</td>
			
		</tr>
	</table>
		Map:<div id="Map"></div>
	<br>
		Barcode:<div id="Barcode"></div>
	<br>
		Distance:<div id="Distance"></div>
	<br>
		Speed:<div id="Speed"></div>
	<br>
		Status Messages:
	<div id="status_messages">
	</div>
	Received Messages:

	<div id="out_messages">
	</div>
	<script>
		var connected_flag = 0
		var mqtt;
		var reconnectTimeout = 2000;
		var host = 'test.mosquitto.org';
		var port = 8080;
		var row = 0;
		var out_msg = "";
		var mcount = 0;
		var choices = [];
	</script>
</body>

</html>